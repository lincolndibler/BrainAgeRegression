# -*- coding: utf-8 -*-
"""cnn3d.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ugWEDrCfnbiZVSMZFHhulXbdybSmlQFy

# 1.) Imports
"""

import torch.nn as nn
import torch
import torch.nn as nn
import torch.nn.functional as F

"""# 2.) First Model (Simple3DCNN) (general)"""

class Simple3DCNN(nn.Module):
    def __init__(self):
        super().__init__()
        self.net = nn.Sequential(
            nn.Conv3d(1, 8, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.MaxPool3d(2),

            nn.Conv3d(8, 16, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.MaxPool3d(2),

            nn.Conv3d(16, 32, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.MaxPool3d(2),

            nn.Flatten(),
            nn.Linear(32 * 22 * 26 * 22, 128),  # Adjust based on your input shape
            nn.ReLU(),
            nn.Linear(128, 1)
        )

    def forward(self, x):
        return self.net(x).squeeze()

"""# 3.) Second Model (Deep3DCNN) (general)"""

class Deep3DCNN(nn.Module):
    def __init__(self, input_shape=(1, 64, 64, 64)):
        super(Deep3DCNN, self).__init__()

        self.features = nn.Sequential(
            nn.Conv3d(1, 16, kernel_size=3, padding=1),
            nn.BatchNorm3d(16),
            nn.ReLU(),
            nn.MaxPool3d(2),

            nn.Conv3d(16, 32, kernel_size=3, padding=1),
            nn.BatchNorm3d(32),
            nn.ReLU(),
            nn.MaxPool3d(2),

            nn.Conv3d(32, 64, kernel_size=3, padding=1),
            nn.BatchNorm3d(64),
            nn.ReLU(),
            nn.AdaptiveAvgPool3d(1)  # Output: (B, 64, 1, 1, 1)
        )

        self.dropout = nn.Dropout(0.3)
        self.fc1 = nn.Linear(64, 32)
        self.fc2 = nn.Linear(32, 1)

    def forward(self, x):
        x = self.features(x)         # (B, 64, 1, 1, 1)
        x = x.view(x.size(0), -1)    # Flatten to (B, 64)
        x = self.dropout(x)
        x = F.relu(self.fc1(x))
        x = self.fc2(x)              # (B, 1)
        return x.view(-1)            # Final shape: (B,)

"""# 3.) Third Model (Medium3DCNN) (general)"""

import torch
import torch.nn as nn

class Medium3DCNN(nn.Module):
    def __init__(self):
        super().__init__()

        self.features = nn.Sequential(
            nn.Conv3d(1, 32, kernel_size=3, padding=1),
            nn.GroupNorm(8, 32),
            nn.LeakyReLU(0.1),
            nn.MaxPool3d(2),

            nn.Conv3d(32, 64, kernel_size=3, padding=1),
            nn.GroupNorm(8, 64),
            nn.LeakyReLU(0.1),
            nn.MaxPool3d(2),

            nn.Conv3d(64, 128, kernel_size=3, padding=1),
            nn.GroupNorm(8, 128),
            nn.LeakyReLU(0.1),
            nn.MaxPool3d(2),

            nn.AdaptiveAvgPool3d(1)  # Output shape: [B, 128, 1, 1, 1]
        )

        self.classifier = nn.Sequential(
            nn.Flatten(),           # [B, 128]
            nn.Linear(128, 128),
            nn.LeakyReLU(0.1),
            nn.Dropout(0.3),
            nn.Linear(128, 64),
            nn.LeakyReLU(0.1),
            nn.Linear(64, 1)
        )

    def forward(self, x):
        x = self.features(x)
        x = self.classifier(x)
        return x.squeeze()  # Output shape: [B]

"""# 4.) 4th Model (Medium3DCNN_v2)"""

class Medium3DCNN_v3(nn.Module):
    def __init__(self, dropout_rate=0.3):
        super().__init__()

        self.features = nn.Sequential(
            nn.Conv3d(1, 16, kernel_size=3, padding=1),
            nn.GroupNorm(4, 16),
            nn.ReLU(),
            nn.MaxPool3d(2),

            nn.Conv3d(16, 32, kernel_size=3, padding=1),
            nn.GroupNorm(4, 32),
            nn.ReLU(),
            nn.MaxPool3d(2),

            nn.Conv3d(32, 64, kernel_size=3, padding=1),
            nn.GroupNorm(8, 64),
            nn.ReLU(),
            nn.MaxPool3d(2),

            nn.Conv3d(64, 64, kernel_size=3, padding=1),
            nn.GroupNorm(8, 64),
            nn.ReLU(),
            nn.MaxPool3d(2),

            nn.Conv3d(64, 128, kernel_size=3, padding=1),
            nn.GroupNorm(8, 128),
            nn.ReLU(),
            nn.AdaptiveAvgPool3d((1, 1, 1))  # Global average pooling
        )

        self.classifier = nn.Sequential(
            nn.Flatten(),
            nn.Linear(128, 64),
            nn.ReLU(),
            nn.Dropout(dropout_rate),
            nn.Linear(64, 1)
        )

    def forward(self, x):
        x = self.features(x)
        x = self.classifier(x)
        return x.view(-1)     # Flattens [B, 1] to [B]